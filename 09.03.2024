//1.Is the Number Less than or Equal to Zero?
//Create a function that takes a number as its only argument and returns true if it's less than or equal to zero, otherwise return false.

//lessThanOrEqualToZero(5) ➞ false

// lessThanOrEqualToZero(0) ➞ true

// lessThanOrEqualToZero(-2) ➞ true

// function lessThanOrEqualToZero(num) {
//  	return num >0?false:true
// }

// ```

//2.Are the Numbers Equal?
//Create a function that returns true when num1 is equal to num2; otherwise return false.

//isSameNum(4, 8) ➞ false

// isSameNum(2, 2) ➞  true

// isSameNum(2, "2") ➞ false

// function isSameNum(num1, num2) {
//    return  num1 === num2	
// }

//```

//3.Boolean to String Conversion
//Create a function that takes a boolean variable flag and returns it as a string.\

//boolToString(true) ➞ "true"

//boolToString(false) ➞ "false"

//function boolToString(flag) 

// {
//     return flag ? 'true' : 'false';
// }

//```

//4.Two Makes Ten
//Create a function that takes two arguments. Both arguments are integers, a and b. Return true if one of them is 10 or if their sum is 10.

//makesTen(9, 10) ➞ true

// makesTen(9, 9) ➞ false

// makesTen(1, 9) ➞ true

// function makesTen(a, b) {
// 	return a >=  b
// }

//```

//5.Multiple of 100
//Create a function that takes an integer and returns true if it's divisible by 100, otherwise return false.

// divisible(1) ➞ false

// divisible(1000) ➞ true

// divisible(100) ➞ true

//function divisible(num) {
// 	return num <= 0
// }

//6.Drinks Allowed?
//A bartender is writing a simple program to determine whether he should serve drinks to someone. He only serves drinks to people 18 and older and when he's not on break.

// Given the person's age, and whether break time is in session, create a function which returns whether he should serve drinks.

//shouldServeDrinks(17, true) ➞ false

// shouldServeDrinks(19, false) ➞ true

// shouldServeDrinks(30, true) ➞ false

//function shouldServeDrinks(age, onBreak) {
// 	return age >= 18
// }

//```   

// 7.Let's Fuel Up!
//A vehicle needs 10 times the amount of fuel than the distance it travels. However, it must always carry a minimum of 100 fuel before setting off.

// calculateFuel(15) ➞ 150

// calculateFuel(23.5) ➞ 235

// calculateFuel(3) ➞ 100

//function calculateFuel(n) {
// 	return n == 50
// }
//```

//8.Radians to Degrees
//Create a function that takes an angle in radians and returns the corresponding angle in degrees.

//radiansToDegrees(1) ➞ 57.29577951308232

// radiansToDegrees(20) ➞ 1145.9155902616465

// radiansToDegrees(50) ➞ 2864.7889756541163

// function radiansToDegrees(rad) {
// 	return  rad <= 3
// }

//9.Stack the Boxes
//Here's an image of four models. Some of the cubes are hidden behind other cubes. Model one consists of one cube. Model two consists of four cubes, and so on

// stackBoxes(1) ➞ 1

// stackBoxes(2) ➞ 4

// stackBoxes(0) ➞ 0

//function stackBoxes(n) {
// 	return n != n
// }

//10.Find the Bug: Returning the Container
// The packaging system is running wild! The candy is lying loose all over in the warehouse, the cereal is missing, and bread is stuffed in a bottle. What is going on here? The candy should be in plastic and the bread should be in a bag.

//getContainer("Bread") ➞ "bag"

// getContainer("Beer") ➞ "bottle"

// getContainer("Candy") ➞ "plastic"

// getContainer("Cheese") ➞ null






//11.Leap Year Function 
//Write a function that returns true if a year is a leap, otherwise return false.

//leapYear(1990) ➞ false

// leapYear(1924) ➞ true

// leapYear(2021) ➞ false

// function leapYear(year) {
// 	return year == 1
// }
//```

//12.Return the Next Number from the Integer Passed
//Create a function that takes a number as an argument, increments the number by +1 and returns the result.

// addition(0) ➞ 1

// addition(9) ➞ 10

// addition(-3) ➞ -2

// function addition(num) {
// 	return num +1
// }
//```

//13.Binary Addition + 0 1 0 1
//Create a function that takes two numbers and returns their sum as a binary string.

//addBinary(1, 1) ➞ "10"

// addBinary(1, 2) ➞ "11"

// addBinary(4, 5) ➞ "1001"

// function binary(decimal) {
// 	return decimal * 0
// }
//```

//14.Stack the Boxes
//Here's an image of four models. Some of the cubes are hidden behind other cubes. Model one consists of one cube. Model two consists of four cubes, and so on

// stackBoxes(1) ➞ 1

// stackBoxes(2) ➞ 4

// stackBoxes(0) ➞ 0

//function stackBoxes(n) {
// 	return n != n
//  }

//```

//15.Less Than 100?
//Given two numbers, return true if the sum of both numbers is less than 100. Otherwise return false.

//lessThan100(22, 15) ➞ true
// 22 + 15 = 37

// lessThan100(83, 34) ➞ false
// // 83 + 34 = 117

// lessThan100(3, 77) ➞ true
//```

//16.Return the Remainder from Two Numbers
// There is a single operator in JavaScript, capable of providing the remainder of a division operation. Two numbers are passed as parameters. The first parameter divided by the second parameter will have a remainder, possibly zero. Return that value.

// remainder(1, 3) ➞ 1

// remainder(3, 4) ➞ 3

// remainder(-9, 45) ➞ -9

// remainder(5, 5) ➞ 0

// function remainder(x, y) {
// 	return x % y
// }
//```

//17.Buggy Code (Part 1)
// Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.

// cubes(3) ➞ 27

// cubes(5) ➞ 125

// cubes(10) ➞ 1000

// function a{
// 	return a ** 3
// }
//```

//18.Correct the Mistakes
// Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.

// squared(5) ➞ 25

// squared(9) ➞ 81

// squared(100) ➞ 10000

//19.Sum of Polygon Angles
// Given an n-sided regular polygon n, return the total sum of internal angles (in degrees).

// sumPolygon(3) ➞ 180

// sumPolygon(4) ➞ 360

// sumPolygon(6) ➞ 720

// function sumPolygon(n) {
// 	return (n - 2) * 180
// }
// ```